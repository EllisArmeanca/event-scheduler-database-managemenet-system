 -- EX 4 si 5

-------------VORBITORI---------------
--VORBITORI: id_vorbitori(PK), nume, prenume, email, telefon
CREATE SEQUENCE vorbitori_seq
START WITH 1000;

CREATE TABLE VORBITORI
(
    id_vorbitor NUMBER(5) CONSTRAINT pkey_vorbitor PRIMARY KEY,
    nume VARCHAR(100) CONSTRAINT nume_vorbitor NOT NULL,
    prenume VARCHAR(100) CONSTRAINT prenume_vorbitor NOT NULL,
    email VARCHAR(100) CONSTRAINT email_vorbitor NOT NULL,
    telefon VARCHAR(20) CONSTRAINT telefon_vorbitor NOT NULL
);

INSERT INTO VORBITORI
VALUES(vorbitori_seq.nextval, 'Pana', 'Marian', 'panamarian@gmail.com', '+40734543127');

INSERT INTO VORBITORI
VALUES(vorbitori_seq.nextval, 'Armeanca', 'Elis', 'ellisarm@gmail.com', '+40784065701');

INSERT INTO VORBITORI
VALUES(vorbitori_seq.nextval, 'Uta', 'Catalin', 'catau@gmail.com', '+40738885577');

INSERT INTO VORBITORI
VALUES(vorbitori_seq.nextval, 'Balea', 'Calin', 'balincalea@gmail.com', '+40766909023');

INSERT INTO VORBITORI
VALUES(vorbitori_seq.nextval, 'Coman', 'Florinel', 'fcoman7@gmail.com', '+40734999777');

commit;
SELECT * FROM VORBITORI;


-----------CAZARI----------
--CAZARI: id_cazare(PK), tip, adresa, numar_locuri
CREATE SEQUENCE cazari_seq
START WITH 2000;

CREATE TABLE CAZARI
(
    id_cazare NUMBER(5) CONSTRAINT pkey_cazare PRIMARY KEY,
    tip VARCHAR(100) CONSTRAINT tip_cazare NOT NULL,
    adresa VARCHAR(100) CONSTRAINT adresa_cazare NOT NULL,
    numar_locuri NUMBER(4) CONSTRAINT numar_locuri_cazare NOT NULL
);

INSERT INTO CAZARI
VALUES (cazari_seq.nextval, 'Hotel', 'Nicolae Balcescu 4, Bucuresti 1, Romania', 3200);

INSERT INTO CAZARI
VALUES (cazari_seq.nextval, 'Vila', 'Intrarea Sectorului 8, Bucuresti 3, Romania', 16);

INSERT INTO CAZARI
VALUES (cazari_seq.nextval, 'Apartament', 'Bulevardul Eroilor 15, bloc 35, ap.98, Cluj-Napoca , Romania', 8);

INSERT INTO CAZARI
VALUES (cazari_seq.nextval, 'Vila', 'Strada Victoriei 23, Timisoara , Romania', 10);

INSERT INTO CAZARI
VALUES (cazari_seq.nextval, 'Hotel', 'Strada Stadionului 1, Cluj-Napoca, Romania', 3200);

commit;
SELECT * FROM CAZARI;

---------LOCATII----------
--LOCATII: id_locatie(PK), nume, capacitate
CREATE SEQUENCE locatii_seq
START WITH 3000;

CREATE TABLE LOCATII
(
    id_locatie NUMBER(5) CONSTRAINT pkey_locatie PRIMARY KEY,
    nume VARCHAR(100) CONSTRAINT nume_locatie NOT NULL,
    capacitate NUMBER(5) CONSTRAINT capacitate_locatie NOT NULL
);

INSERT INTO LOCATII
VALUES (locatii_seq.nextval, 'Romexpo, Bucuresti', 10000  );

INSERT INTO LOCATII
VALUES (locatii_seq.nextval, 'Aula Magna UPB, Bucuresti', 1000  );

INSERT INTO LOCATII
VALUES (locatii_seq.nextval, 'BT Arena, Cluj-Napoca', 10000  );

INSERT INTO LOCATII
VALUES (locatii_seq.nextval, 'Auditorium Maximum, Cluj-Napoca', 800  );

INSERT INTO LOCATII
VALUES (locatii_seq.nextval, 'Sala Polivalenta, Timisoara', 8000  );

commit;
SELECT * FROM LOCATII;

------GRUPURI--------
--GRUPURI: id_grup(PK), nume, oras
CREATE SEQUENCE grupuri_seq
START WITH 4000;

CREATE TABLE GRUPURI
(
    id_grup NUMBER(5) CONSTRAINT pkey_grup PRIMARY KEY,
    nume VARCHAR(100) CONSTRAINT nume_grup NOT NULL,
    oras VARCHAR(100) CONSTRAINT oras_grup NOT NULL
);

INSERT INTO GRUPURI
VALUES (grupuri_seq.nextval, 'Bucuresti Tech Talks', 'Bucuresti'  );

INSERT INTO GRUPURI
VALUES (grupuri_seq.nextval, 'Timisoara Dev Community', 'Timisoara'  );

INSERT INTO GRUPURI
VALUES (grupuri_seq.nextval, 'Bucuresti Ted Talks', 'Bucuresti'  );

INSERT INTO GRUPURI
VALUES (grupuri_seq.nextval, 'Open-Mind Cluj', 'Cluj-Napoca'  );

INSERT INTO GRUPURI
VALUES (grupuri_seq.nextval, 'Growup Meetings Cluj-Napoca', 'Cluj-Napoca'  );

commit;
SELECT * FROM GRUPURI;

---------DISCURSURI-------------
--DISCURSURI: id_discurs(PK), titlu, durata

CREATE SEQUENCE discursuri_seq
START WITH 5000;

CREATE TABLE DISCURSURI
(
    id_discurs NUMBER(5) CONSTRAINT pkey_discurs PRIMARY KEY,
    titlu VARCHAR(255) CONSTRAINT titlu_discurs NOT NULL,
    durata NUMBER(4) CONSTRAINT durata_discurs NOT NULL --minute
);

INSERT INTO DISCURSURI
VALUES (discursuri_seq.nextval, 'Cum sa imi gestionez timpul?', 45 );

INSERT INTO DISCURSURI
VALUES (discursuri_seq.nextval, 'Cum raman up-to-date cu industria?', 30 );

INSERT INTO DISCURSURI
VALUES (discursuri_seq.nextval, 'Gasirea satisfactiei in munca. Cum?', 50 );

INSERT INTO DISCURSURI
VALUES (discursuri_seq.nextval, 'Tehnici de dezvoltare web', 60 );

INSERT INTO DISCURSURI
VALUES (discursuri_seq.nextval, 'Sa ne propunem obiective personale!', 45 );

commit;
SELECT * from DISCURSURI;


--------------EVENIMENTE---------------
--EVENIMENTE: id_eveniment(PK), id_grup(FK1), id_cazare(FK2), 
--            id_locatie(FK3), nume, data_inceput, data_sfarsit


CREATE SEQUENCE evenimente_seq
START WITH 6000;

CREATE TABLE EVENIMENTE
(
    id_eveniment NUMBER(5) CONSTRAINT pkey_eveniment PRIMARY KEY,
    nume VARCHAR(150) CONSTRAINT nume_eveniment NOT NULL,
    data_inceput DATE CONSTRAINT data_inceput_eveniment NOT NULL,
    data_sfarsit DATE CONSTRAINT data_sfarsit_eveniment NOT NULL,
    id_grup NUMBER(5),
        CONSTRAINT fk_ev_grup FOREIGN KEY(id_grup) REFERENCES GRUPURI(id_grup),
    id_cazare NUMBER(5),
        CONSTRAINT fk_ev_cazare FOREIGN KEY(id_cazare) REFERENCES CAZARI(id_cazare)
);

INSERT INTO EVENIMENTE
VALUES (evenimente_seq.nextval, 'Conferinta de TECH #1 aprilie 2025', 
        TO_DATE('15-04-2025','dd-mm-yyyy'), 
        TO_DATE('15-04-2025','dd-mm-yyyy'), 4000, 2000  );

INSERT INTO EVENIMENTE
VALUES (evenimente_seq.nextval, 'Conferinta anuala DEV 2025 ', 
        TO_DATE('25-04-2025','dd-mm-yyyy'), 
        TO_DATE('26-04-2025','dd-mm-yyyy'), 4001, 2003  );
        
INSERT INTO EVENIMENTE
VALUES (evenimente_seq.nextval, 'TED TALKS SESSION#1 2025', 
        TO_DATE('01-02-2025','dd-mm-yyyy'), 
        TO_DATE('01-02-2025','dd-mm-yyyy'), 4002, 2001 );
        
INSERT INTO EVENIMENTE
VALUES (evenimente_seq.nextval, 'Training dezvoltare personala martie 2025', 
        TO_DATE('15-03-2025','dd-mm-yyyy'), 
        TO_DATE('15-03-2025','dd-mm-yyyy'), 4003, 2002  );
        
INSERT INTO EVENIMENTE
VALUES (evenimente_seq.nextval, 'Seminar arta conversatiei', 
        TO_DATE('02-05-2025','dd-mm-yyyy'), 
        TO_DATE('04-05-2025','dd-mm-yyyy'), 4004, 2004  );


commit;
SELECT * FROM evenimente;

-------SPONSORI-----------
--SPONSORI: id_sponsor(PK), id_eveniment(FK1), nume

CREATE SEQUENCE sponsori_seq
START WITH 7000;

CREATE TABLE SPONSORI
(
    id_sponsor NUMBER(5) CONSTRAINT pkey_sponsor PRIMARY KEY,
    nume VARCHAR(150) CONSTRAINT nume_sponsor NOT NULL
);

INSERT INTO SPONSORI
VALUES (sponsori_seq.nextval, 'Endava' );

INSERT INTO SPONSORI
VALUES (sponsori_seq.nextval, 'KPMG' );

INSERT INTO SPONSORI
VALUES (sponsori_seq.nextval, 'MIcrosoft' );

INSERT INTO SPONSORI
VALUES (sponsori_seq.nextval, 'Google' );

INSERT INTO SPONSORI
VALUES (sponsori_seq.nextval, 'ING Bank' );

commit;
select * from sponsori;


---------------FACTURI----------------
--FACTURI: id_factura(PK), id_eveniment(FK1), suma, descriere

CREATE SEQUENCE facturi_seq 
START WITH 8000;

CREATE TABLE FACTURI
(
    id_factura NUMBER(5) CONSTRAINT pkey_factura PRIMARY KEY,
    suma NUMBER(7) CONSTRAINT suma_factura NOT NULL,
    descriere VARCHAR(255) CONSTRAINT descriere_factura NOT NULL,
    id_eveniment NUMBER(5),
        CONSTRAINT fk_fac_eveniment FOREIGN KEY(id_eveniment) REFERENCES EVENIMENTE(id_eveniment)
);

INSERT INTO FACTURI
VALUES (facturi_seq.nextval, 65000, 'Chirie locatie', 6000);

INSERT INTO FACTURI
VALUES (facturi_seq.nextval, 6500, 'Utilitati locatie', 6001);

INSERT INTO FACTURI
VALUES (facturi_seq.nextval, 10000, 'Plata cazare', 6002);

INSERT INTO FACTURI
VALUES (facturi_seq.nextval, 80000, 'Chirie locatie', 6003);

INSERT INTO FACTURI
VALUES (facturi_seq.nextval, 99990, 'Chirie echipamente audio-video', 6004);

commit;
select * from facturi;



-----PARTICIPANTI------
--PARTICIPANTI: id_participant (PK), id_eveniment(FK1), nume, prenume, email

CREATE SEQUENCE participanti_seq
START WITH 9000;

CREATE TABLE PARTICIPANTI
(
    id_participant NUMBER(5) CONSTRAINT pkey_participant PRIMARY KEY,
    nume VARCHAR(150) CONSTRAINT nume_participant NOT NULL,
    prenume VARCHAR(150) CONSTRAINT prenume_participant NOT NULL,
    email VARCHAR(150) CONSTRAINT email_participant NOT NULL,
    id_eveniment NUMBER(5),
        CONSTRAINT fk_part_eveniment FOREIGN KEY(id_eveniment) REFERENCES EVENIMENTE(id_eveniment)
);

INSERT INTO PARTICIPANTI
VALUES (participanti_seq.nextval, 'Armeanca', 'Daniela', 'dana_arm@yahoo.com', 6000);

INSERT INTO PARTICIPANTI
VALUES (participanti_seq.nextval, 'Armeanca', 'Daniela', 'dana_arm@yahoo.com', 6000);

INSERT INTO PARTICIPANTI
VALUES (participanti_seq.nextval, 'Armeanca', 'Daniel', 'dani_arm@yahoo.com', 6001);

INSERT INTO PARTICIPANTI
VALUES (participanti_seq.nextval, 'Ion', 'Stefan', 'ionstef@yahoo.com', 6002);

INSERT INTO PARTICIPANTI
VALUES (participanti_seq.nextval, 'Ion', 'Sofia', 'sofiii@gmail.com', 6003);

INSERT INTO PARTICIPANTI
VALUES (participanti_seq.nextval, 'Dumitrache', 'Marius', 'dumyy80@gmail.com', 6004);

commit;
SELECT * FROM PARTICIPANTI;


-----VORBITORI_DISCURSURI_EVENIMENTE---------------
-------VORBITORI_DISCURSURI_EVENIMENTE: id_vorbitor(PK, FK1), id_discurs(PK, FK2), id_eveniment(PK, FK3)

CREATE TABLE VORBITORI_DISCURSURI_EVENIMENTE
(
    id_vorbitor NUMBER(5) CONSTRAINT pk_c_vorbitor REFERENCES VORBITORI(id_vorbitor),
    id_discurs NUMBER(5) CONSTRAINT pk_c_discurs REFERENCES DISCURSURI(id_discurs),
    id_eveniment NUMBER(5) CONSTRAINT pk_c_eveniment REFERENCES EVENIMENTE(id_eveniment),
    CONSTRAINT pk_compus_vde PRIMARY KEY (id_vorbitor,id_discurs,id_eveniment )
);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1000, 5000, 6000);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1001, 5001, 6001);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1002, 5002, 6002);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1003, 5003, 6003);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1004, 5004, 6004);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1000, 5000, 6004);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1001, 5001, 6003);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1002, 5003, 6002);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1003, 5003, 6001);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1004, 5004, 6000);

INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE
values (1001, 5004, 6002);

commit;
select * from VORBITORI_DISCURSURI_EVENIMENTE;


----------- RECENZII-----------------
--RECENZII: id_recenzie (PK), id_participant(FK1), 
--          (id_vorbitor, id_discurs, id_eveniment) (FK2), 
--          rating, data, text


CREATE SEQUENCE recenzii_seq
START WITH 10000;


CREATE TABLE RECENZII
(
    id_recenzie NUMBER(5) CONSTRAINT pk_recenzie PRIMARY KEY,
    rating NUMBER (2) CONSTRAINT rating_recenzie NOT NULL,
    data DATE CONSTRAINT data_recenzie NOT NULL,
    text VARCHAR(255) CONSTRAINT text_recenzie NOT NULL,
    id_vorbitor NUMBER(5),
    id_discurs NUMBER(5),
    id_eveniment NUMBER(5),
    CONSTRAINT fk_recenzie_vde FOREIGN KEY (id_vorbitor, id_discurs, id_eveniment)
        REFERENCES VORBITORI_DISCURSURI_EVENIMENTE (id_vorbitor, id_discurs, id_eveniment),
    id_participant NUMBER(5),
    CONSTRAINT fk_recenzie_part FOREIGN KEY(id_participant) REFERENCES PARTICIPANTI(id_participant)
);

INSERT INTO RECENZII
VALUES(recenzii_seq.nextval, 10, TO_DATE('16-04-2025','dd-mm-yyyy'),
        'Subiectele bine abordate.', 1000, 5000, 6000, 9001 );

INSERT INTO RECENZII
VALUES(recenzii_seq.nextval, 10, TO_DATE('26-04-2025','dd-mm-yyyy'),
        'SUPERB.', 1001, 5001, 6001, 9002 );
        
INSERT INTO RECENZII
VALUES(recenzii_seq.nextval, 6, TO_DATE('02-02-2025','dd-mm-yyyy'),
        'MODEST...', 1002, 5002, 6002, 9003 );

INSERT INTO RECENZII
VALUES(recenzii_seq.nextval, 9, TO_DATE('16-03-2025','dd-mm-yyyy'),
        'Extraordinar!', 1003, 5003, 6003, 9004 );

INSERT INTO RECENZII
VALUES(recenzii_seq.nextval, 8, TO_DATE('05-05-2025','dd-mm-yyyy'),
        'Mi-a placut mult tema!!', 1004, 5004, 6004, 9005 );

commit;
select * from RECENZII;


------------VORBITORI_CAZARI----------
--VORBITORI_CAZARI: id_vorbitor(PK,FK1), id_cazare(PK, FK2)

CREATE TABLE VORBITORI_CAZARI
(
    id_vorbitor NUMBER(5) CONSTRAINT pk_cc_vorbitor REFERENCES VORBITORI(id_vorbitor),
    id_cazare NUMBER(5) CONSTRAINT pk_cc_cazare REFERENCES CAZARI(id_cazare),
    CONSTRAINT pk_compus_vc PRIMARY KEY (id_vorbitor,id_cazare )
);

INSERT INTO VORBITORI_CAZARI
VALUES (1000, 2000);

INSERT INTO VORBITORI_CAZARI
VALUES (1004, 2000);

INSERT INTO VORBITORI_CAZARI
VALUES (1001, 2003);

INSERT INTO VORBITORI_CAZARI
VALUES (1003, 2003);

INSERT INTO VORBITORI_CAZARI
VALUES (1002, 2001);

INSERT INTO VORBITORI_CAZARI
VALUES (1001, 2002);

INSERT INTO VORBITORI_CAZARI
VALUES (1003, 2002);

INSERT INTO VORBITORI_CAZARI
VALUES (1000, 2004);

INSERT INTO VORBITORI_CAZARI
VALUES (1001, 2001);


------EVENIMENTE_SPONSORI--------
--EVENIMENTE_SPONSORI: id_eveniment(PK, FK1), id_sponsor(PK, FK2), suma
CREATE TABLE EVENIMENTE_SPONSORI
(
    id_eveniment NUMBER(5) CONSTRAINT pk_es_eveniment REFERENCES EVENIMENTE(id_eveniment),
    id_sponsor NUMBER(5) CONSTRAINT pk_es_sponsor REFERENCES SPONSORI(id_sponsor),
    CONSTRAINT pk_compus_es PRIMARY KEY (id_eveniment,id_sponsor ),
    suma NUMBER(7) CONSTRAINT es_suma NOT NULL
);


INSERT INTO EVENIMENTE_SPONSORI
VALUES(6000, 7000, 12300);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6000, 7001, 120000);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6001, 7001, 12600);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6001, 7002, 62300);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6002, 7002, 1000000);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6002, 7003, 990000);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6003, 7003, 22300);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6003, 7004, 22222);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6004, 7004, 32300);

INSERT INTO EVENIMENTE_SPONSORI
VALUES(6004, 7000, 33333);


ALTER TABLE EVENIMENTE
ADD id_locatie NUMBER(5);
ALTER TABLE EVENIMENTE
ADD CONSTRAINT fk_ev_locatie FOREIGN KEY (id_locatie) REFERENCES LOCATII(id_locatie);

UPDATE EVENIMENTE
SET id_locatie = 3000
WHERE id_eveniment =6000;

UPDATE EVENIMENTE
SET id_locatie = 3004
WHERE id_eveniment =6001;


UPDATE EVENIMENTE
SET id_locatie = 3001
WHERE id_eveniment =6002;


UPDATE EVENIMENTE
SET id_locatie = 3002
WHERE id_eveniment =6003;


UPDATE EVENIMENTE
SET id_locatie = 3003
WHERE id_eveniment =6004;

--EX 6
CREATE OR REPLACE PROCEDURE EX6 IS
    
    --definim colectiile
    TYPE tabel_sponsori IS  TABLE OF VARCHAR2(150); -- nested table
    TYPE sume_sponsori IS TABLE OF NUMBER INDEX BY VARCHAR2(150); -- tabel indexat pe baza string
    TYPE evenimente_sponsorizate IS VARRAY(5) OF VARCHAR2(150); -- vector
    
    sponsori tabel_sponsori := tabel_sponsori();
    sumes sume_sponsori;
    ev evenimente_sponsorizate :=evenimente_sponsorizate();

BEGIN
    SELECT s.nume
    BULK COLLECT INTO sponsori
    FROM SPONSORI s; --SPONSORII
    
    FOR i in 1 .. sponsori.COUNT LOOP
        SELECT SUM(es.suma)
        INTO sumes(sponsori(i))
        FROM EVENIMENTE_SPONSORI es
        JOIN SPONSORI s ON es.id_sponsor = s.id_sponsor
        WHERE s.nume = sponsori(i);
    END LOOP; --sumele
    
    FOR i in 1 .. sponsori.COUNT LOOP
        
        ev :=evenimente_sponsorizate();
        
        SELECT e.nume
        BULK COLLECT INTO ev
        FROM EVENIMENTE e
        JOIN EVENIMENTE_SPONSORI es ON e.id_eveniment = es.id_eveniment
        JOIN SPONSORI s ON es.id_sponsor = s.id_sponsor
        WHERE s.nume = sponsori(i)
        FETCH FIRST 5 ROWS ONLY;
        
        DBMS_OUTPUT.PUT_LINE('Sponsor: ' || sponsori(i));
        DBMS_OUTPUT.PUT_LINE('Suma totala: ' || sumes(sponsori(i)) || '€');
        DBMS_OUTPUT.PUT_LINE('Evenimente la care a contribuit: ');
        
        FOR j IN 1 .. ev.COUNT LOOP
            DBMS_OUTPUT.PUT_LINE(' - ' || ev(j));
        END LOOP;
        
        DBMS_OUTPUT.PUT_LINE('-----------------------------');
    END LOOP;
    
END;
/

        
    
BEGIN
    EX6;
END;
/

---EX 7
CREATE OR REPLACE PROCEDURE EX7 IS
    
    
    --cursor clasic
    CURSOR c_evenimente IS
        SELECT id_eveniment, nume
        FROM EVENIMENTE;
    
    --cursor parametrizat
    CURSOR c_participanti(ev NUMBER) IS
        SELECT nume, prenume, email
        FROM PARTICIPANTI p
        WHERE ev = p.id_eveniment;
    
    v_id_eveniment EVENIMENTE.id_eveniment%TYPE;
    v_nume_ev EVENIMENTE.nume%TYPE;
    
    v_nume PARTICIPANTI.nume%TYPE;
    v_prenume PARTICIPANTI.prenume%TYPE;
    v_email PARTICIPANTI.email%TYPE;
    
BEGIN
    OPEN c_evenimente;
    LOOP
        FETCH c_evenimente INTO v_id_eveniment, v_nume_ev;
        EXIT WHEN c_evenimente%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Eveniment: ' || v_nume_ev || ' id: ' || v_id_eveniment);
        DBMS_OUTPUT.PUT_LINE('Participanti: ');
        
        OPEN c_participanti(v_id_eveniment);
        LOOP
            FETCH c_participanti INTO v_nume, v_prenume, v_email;
            EXIT when c_participanti %NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE(' - ' || v_nume || ' ' || v_prenume || ' (' || v_email || ')');
        END LOOP;
        CLOSE c_participanti;
        
        DBMS_OUTPUT.PUT_LINE('------------------------');
        
    END LOOP;
    CLOSE c_evenimente;

END;
/

BEGIN
    EX7;
END;
/

--EX 8
 
CREATE OR REPLACE FUNCTION EX8(
    nume_grup IN VARCHAR2
) RETURN NUMBER IS
    v_test NUMBER; -- pt existenta grupului
    suma_facturi NUMBER;
    
    no_facturi_exception EXCEPTION; -- exceptie proprie
    
BEGIN
    
    --verificam existenta grupului
    SELECT g.id_grup
    INTO v_test
    FROM GRUPURI g
    WHERE g.nume = nume_grup;
    
    SELECT SUM(f.suma)
    INTO suma_facturi
    FROM FACTURI f
    JOIN EVENIMENTE e ON f.id_eveniment = e.id_eveniment
    JOIN GRUPURI g ON e.id_grup = g.id_grup
    WHERE g.nume = nume_grup;
    
    IF suma_facturi IS NULL THEN
        RAISE no_facturi_exception;
    END IF;
    
    RETURN suma_facturi;

EXCEPTION

    -- nu exista grupul
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Grupul cu numele ' || nume_grup || ' nu exista ');
        RETURN -1;
    
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Exista mai multe grupuri cu numele '|| nume_grup);
        RETURN -2;
        
    WHEN no_facturi_exception THEN
        DBMS_OUTPUT.PUT_LINE('Grupul ' || nume_grup || ' nu are facturi asociate.');
        RETURN 0;
    
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('A aparut o eroare neasteptata: ' || SQLERRM);
        RETURN -3;
END EX8;
/

DECLARE
    v_total_facturi NUMBER;
BEGIN
    v_total_facturi := EX8('Bucuresti Tech Talks');
    DBMS_OUTPUT.PUT_LINE('Total facturi: ' || v_total_facturi);
END;
/

--no data found
DECLARE
    v_total_facturi NUMBER;
BEGIN
    v_total_facturi := EX8('Grup');
    DBMS_OUTPUT.PUT_LINE('Total facturi: ' || v_total_facturi);
END;
/

INSERT INTO GRUPURI
VALUES (4099, 'Bucuresti Tech Talks', 'X'  );
    --too many rows
DECLARE
    v_total_facturi NUMBER;
BEGIN
    v_total_facturi := EX8('Bucuresti Tech Talks');
    DBMS_OUTPUT.PUT_LINE('Total facturi: ' || v_total_facturi);
END;
/

delete from grupuri
where id_grup = 4099;
--no facturi exception
INSERT INTO GRUPURI
VALUES (4099, 'Bucuresti Tech Talks2', 'X'  );
    
DECLARE
    v_total_facturi NUMBER;
BEGIN
    v_total_facturi := EX8('Bucuresti Tech Talks2');
    DBMS_OUTPUT.PUT_LINE('Total facturi: ' || v_total_facturi);
END;
/

-- EX 9
CREATE OR REPLACE PROCEDURE EX9(
    p_id_vorbitor IN NUMBER,
    p_id_eveniment IN NUMBER
) IS
    v_nume_vorbitor VARCHAR2(100);
    v_prenume_vorbitor VARCHAR2(100);
    v_tip_cazare VARCHAR2(100);
    v_adresa_cazare VARCHAR2(100);
    v_numar_discursuri NUMBER;
    v_numar_participanti NUMBER;

    -- Excep?ii proprii
    fara_discursuri EXCEPTION;
    fara_participanti EXCEPTION;
    fara_cazare EXCEPTION;
BEGIN
    -- Interogare pentru a ob?ine detalii despre vorbitor, cazare, discursuri ?i num?rul de participan?i
    SELECT v.nume, 
           v.prenume, 
           c.tip, 
           c.adresa,
           COUNT(DISTINCT vde.id_discurs) AS numar_discursuri,
           COUNT(DISTINCT p.id_participant) AS numar_participanti
    INTO v_nume_vorbitor, 
         v_prenume_vorbitor, 
         v_tip_cazare, 
         v_adresa_cazare,
         v_numar_discursuri,
         v_numar_participanti
    FROM VORBITORI v
    JOIN VORBITORI_DISCURSURI_EVENIMENTE vde ON v.id_vorbitor = vde.id_vorbitor
    JOIN EVENIMENTE e ON vde.id_eveniment = e.id_eveniment
    LEFT JOIN CAZARI c ON e.id_cazare = c.id_cazare
    LEFT JOIN PARTICIPANTI p ON e.id_eveniment = p.id_eveniment
    WHERE v.id_vorbitor = p_id_vorbitor
      AND vde.id_eveniment = p_id_eveniment
    GROUP BY v.nume, v.prenume, c.tip, c.adresa;

    -- Verific?m dac? exist? discursuri
    IF v_numar_discursuri = 0 THEN
        RAISE fara_discursuri;
    END IF;

    -- Verific?m dac? exist? participan?i
    IF v_numar_participanti = 0 THEN
        RAISE fara_participanti;
    END IF;

    -- Verific?m dac? exist? cazare
    IF v_tip_cazare IS NULL THEN
        RAISE fara_cazare;
    END IF;

    -- Afi??m rezultatele
    DBMS_OUTPUT.PUT_LINE('Vorbitor: ' || v_nume_vorbitor || ' ' || v_prenume_vorbitor);
    DBMS_OUTPUT.PUT_LINE('Tip cazare: ' || v_tip_cazare);
    DBMS_OUTPUT.PUT_LINE('Adresa cazare: ' || v_adresa_cazare);
    DBMS_OUTPUT.PUT_LINE('Num?r discursuri în evenimentul specificat: ' || v_numar_discursuri);
    DBMS_OUTPUT.PUT_LINE('Num?r participan?i în evenimentul specificat: ' || v_numar_participanti);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nu exist? date pentru vorbitorul cu ID-ul ' || p_id_vorbitor || ' la evenimentul cu ID-ul ' || p_id_eveniment || '.');
    WHEN fara_discursuri THEN
        DBMS_OUTPUT.PUT_LINE('Vorbitorul cu ID-ul ' || p_id_vorbitor || ' nu are discursuri în evenimentul cu ID-ul ' || p_id_eveniment || '.');
    WHEN fara_participanti THEN
        DBMS_OUTPUT.PUT_LINE('Evenimentul cu ID-ul ' || p_id_eveniment || ' nu are participan?i.');
    WHEN fara_cazare THEN
        DBMS_OUTPUT.PUT_LINE('Evenimentul cu ID-ul ' || p_id_eveniment || ' nu are cazare asociat?.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('A ap?rut o eroare nea?teptat?: ' || SQLERRM);
END EX9;
/



INSERT INTO VORBITORI_DISCURSURI_EVENIMENTE VALUES(1002, 5000, 6088);

INSERT INTO PARTICIPANTI
VALUES (9999, 'Armeanca', 'Gabi', 'gab@yahoo.com', 6088);

INSERT INTO EVENIMENTE
VALUES (6088, 'TEST', 
        TO_DATE('15-04-2025','dd-mm-yyyy'), 
        TO_DATE('15-04-2025','dd-mm-yyyy'), 4000,  NULL ,3003 );

BEGIN
    EX9(1002, 6088);
END;
/

--EX 10
CREATE OR REPLACE TRIGGER EX10
BEFORE INSERT OR DELETE OR UPDATE ON VORBITORI
BEGIN
    IF TO_CHAR(SYSDATE, 'HH24') BETWEEN 15 AND 24 THEN
        RAISE_APPLICATION_ERROR(
            -20001,
            'Tabela VORBITORI nu se poate modifica in intervalul orar 15:00-24:00!'
        );
    END IF;
END;
/

INSERT INTO VORBITORI
VALUES(vorbitori_seq.nextval, 'Man', 'Dennis', 'dennis98@gmail.com', '+40734889777');

DROP TRIGGER EX10;


--EX 11
CREATE OR REPLACE TRIGGER EX11
BEFORE INSERT OR UPDATE ON EVENIMENTE
FOR EACH ROW
DECLARE
BEGIN
    IF TO_CHAR(:NEW.data_inceput, 'DD-MM') IN ('24-12', '25-12', '01-01', '01-05') THEN
        RAISE_APPLICATION_ERROR(
            -20001,
            'Data de inceput a evenimentului nu poate fi în zilele: 24 decembrie, 25 decembrie, 1 ianuarie, sau 1 mai.'
        );
    END IF;
END;
/

INSERT INTO EVENIMENTE
VALUES (6070, 'TEST', 
        TO_DATE('01-01-2025','dd-mm-yyyy'), 
        TO_DATE('05-01-2025','dd-mm-yyyy'), 4000, 2000, 3003 );
        
DROP TRIGGER EX11;

--EX 12

CREATE TABLE audit_events (
    nume_bd VARCHAR2(50),
    user_logat VARCHAR2(30),
    eveniment VARCHAR2(20),
    tip_obiect_referit VARCHAR2(30),
    nume_obiect_referit VARCHAR2(30),
    data TIMESTAMP(3)
);


CREATE OR REPLACE TRIGGER audit_modificari
AFTER CREATE OR DROP OR ALTER ON SCHEMA
BEGIN
    INSERT INTO audit_events
    VALUES (
        SYS.DATABASE_NAME,              -- Numele bazei de date
        SYS.LOGIN_USER,                 -- Utilizatorul conectat
        SYS.SYSEVENT,                   -- Evenimentul (CREATE, DROP, ALTER)
        SYS.DICTIONARY_OBJ_TYPE,        -- Tipul obiectului (TABLE, INDEX etc.)
        SYS.DICTIONARY_OBJ_NAME,        -- Numele obiectului
        SYSTIMESTAMP(3)                 -- Momentul exact al evenimentului
    );
END;
/

CREATE TABLE exemplu (coloana1 NUMBER);

ALTER TABLE exemplu ADD (coloana2 VARCHAR2(50));

DROP TABLE exemplu;

SELECT * FROM audit_events;

DROP TABLE audit_events;
/

DROP TRIGGER audit_modificari;
/
